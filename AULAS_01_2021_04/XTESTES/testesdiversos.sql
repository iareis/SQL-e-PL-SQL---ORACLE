DECLARE 
    TYPE NOME_TYPE IS TABLE OF TALUNO.NOME%TYPE;
    NOME_TABLE NOME_TYPE := NOME_TYPE(); --CRIANDO INSTANCIA
BEGIN 
    NOME_TABLE.EXTEND; --ALOCANDO UMA NOVA LINHA
    NOME_TABLE(1) := &table1;
    NOME_TABLE.EXTEND; --ALOCANDO UMA NOVA LINHA
    NOME_TABLE(2) := &table2;
    DBMS_OUTPUT.PUT_LINE('NOME 1: '||NOME_TABLE(1));   
    DBMS_OUTPUT.PUT_LINE('NOME 2: '||NOME_TABLE(2));
END;  
/*
Relatório de erros -
ORA-06550: linha 6, coluna 22:
PLS-00201: o identificador 'MARCO' deve ser declarado
ORA-06550: linha 6, coluna 5:
PL/SQL: Statement ignored
ORA-06550: linha 8, coluna 22:
PLS-00201: o identificador 'RADOMILE' deve ser declarado
ORA-06550: linha 8, coluna 5:
PL/SQL: Statement ignored
06550. 00000 -  "line %s, column %s:\n%s"
*Cause:    Usually a PL/SQL compilation error.
*Action:
*/ 

DECLARE 
    TYPE NOME_TYPE IS TABLE OF TALUNO.NOME%TYPE;
    NOME_TABLE NOME_TYPE := NOME_TYPE(); --CRIANDO INSTANCIA
BEGIN 
    NOME_TABLE.EXTEND; --ALOCANDO UMA NOVA LINHA
    NOME_TABLE(1) := 'MARCO';
    NOME_TABLE.EXTEND; --ALOCANDO UMA NOVA LINHA
    NOME_TABLE(2) := 'RADOMILE';
    DBMS_OUTPUT.PUT_LINE('NOME 1: '||NOME_TABLE(1));   
    DBMS_OUTPUT.PUT_LINE('NOME 2: '||NOME_TABLE(2));
END;
/*
NOME 1: MARCO
NOME 2: RADOMILE


Procedimento PL/SQL concluído com sucesso.
*/



DECLARE 
    vCOD_ALUNO  TALUNO.COD_ALUNO%TYPE;
    vNOME       TALUNO.NOME%TYPE;
    CURSOR C1 IS 
        SELECT COD_ALUNO, NOME
        FROM TALUNO;
BEGIN 
    OPEN C1;
    LOOP 

        FETCH C1 INTO vCOD_ALUNO, vNOME;
        DBMS_OUTPUT.PUT_LINE('CODIGO: '||LPAD(vCOD_ALUNO,4,'0')||' - '||'Nome: '||vNOME);
        EXIT    WHEN C1%ROWCOUNT >= 10
                OR C1%NOTFOUND;
    END LOOP;
    CLOSE C1;
END;




CREATE OR REPLACE PROCEDURE AUMENTA_PRECOCURSO(pCOD_CURSO NUMBER)
IS 
--VARIAVEIS AQUI COLOCADAS, MAS NESTE EXEMPLO NÃO TEM
BEGIN 
    --AUMENTAR O VALOR DE UM CURSO EM 10%
    UPDATE TCURSO SET 
    VALOR = VALOR * 1.1
    WHERE COD_CURSO = pCOD_CURSO;
END;

EXEC AUMENTA_PRECOCURSO(&COD);

SELECT * FROM TCURSO;



-- =====================================================================================

CREATE OR REPLACE PROCEDURE PHONE_NUMBER
(P_FONE IN OUT VARCHAR2)
IS 
BEGIN 
    P_FONE := '( '||SUBSTR(P_FONE, 0, 2)||') '||SUBSTR(P_FONE, 2, 5)||'-'||SUBSTR(P_FONE, 7, 4);
END;
/*
Procedure PHONE_NUMBER compilado
*/



DECLARE
    V_FONE VARCHAR2(20);
BEGIN 
    V_FONE := &NUMERO_CELULAR;
    PHONE_NUMBER(V_FONE);
    DBMS_OUTPUT.PUT_LINE(V_FONE);
END;

-- =====================================================================================

CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO2
BEFORE INSERT OR UPDATE OR DELETE ON TCONTRATO
BEGIN 
    IF  (TO_CHAR(SYSDATE, 'D') IN (1, 7) OR
         TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN 8 AND 23) THEN
         IF( INSERTING ) THEN
            RAISE_APPLICATION_ERROR(-20001, 'NAO PODE INSERIR');
         ELSIF( DELETING ) THEN
            RAISE_APPLICATION_ERROR(-20002, 'NAO PODE REMOVER');
         ELSIF( UPDATING('TOTAL') ) THEN
            RAISE_APPLICATION_ERROR(-20003, 'NAO PODE ALTERAR TOTAL');
         ELSE
            RAISE_APPLICATION_ERROR(-20004, 'NAO PODE ALTERAR');
         END IF;
    END IF;
END;

================================================================================================

CREATE OR REPLACE FUNCTION PRIMO (  V_N NUMBER)   RETURN VARCHAR2 
IS  V_SQRT NUMBER(4);  
    V_DIVISOR NUMBER(4);  
    V_RESULTADO VARCHAR2(12) := 'É PRIMO';
BEGIN  
    V_SQRT := SQRT(V_N);  
    FOR V_I IN 2..V_SQRT 
    LOOP   
        IF MOD(V_N,V_I) = 0 AND V_N <> V_I THEN    
            V_RESULTADO := 'NÃO É PRIMO';    
            V_DIVISOR := V_I;   
        END IF;  
    END LOOP;  
    RETURN V_RESULTADO; 
END


================================================================================================
FUNCTION OK
IMPRESSÃO FALHA

CREATE OR REPLACE FUNCTION CONVERTE_TEMP_FEMC (TEMP_F NUMBER) RETURN NUMBER
IS TEMP_C NUMBER(5,1);
BEGIN 
TEMP_C := (TEMP_F - 32) / 1.8;
RETURN TEMP_C;
END;


DECLARE
    V_RESP NUMBER;
    GRAU_F NUMBER;
BEGIN 
    V_RESP := CONVERTE_TEMP_FEMC(&TEMPERATURA_FAHRENHEIT);
    DBMS_OUTPUT.PUT_LINE('A TEMPERATURA'||TEMP_F||' GRAUS FAHRENHEIT CORRESPONDE A '||V_RESP||' GRAUS CELSIUS.');





















